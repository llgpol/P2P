<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper
	namespace="com.yueqian.business.mapper.RechargeOfflineMapper">
	<resultMap id="BaseResultMap"
		type="com.yueqian.business.domain.RechargeOffline">
		<id column="id" property="id" jdbcType="BIGINT" />
		<result column="state" property="state" jdbcType="TINYINT" />
		<result column="remark" property="remark" jdbcType="VARCHAR" />
		<result column="auditTime" property="auditTime"
			jdbcType="TIMESTAMP" />
		<result column="applyTime" property="applyTime"
			jdbcType="TIMESTAMP" />
		<result column="tradeCode" property="tradeCode"
			jdbcType="VARCHAR" />
		<result column="tradeTime" property="tradeTime"
			jdbcType="TIMESTAMP" />
		<result column="amount" property="amount" jdbcType="DECIMAL" />
		<result column="note" property="note" jdbcType="VARCHAR" />

		<association property="applier"
			javaType="com.yueqian.base.domain.Logininfo" columnPrefix="ap_">
			<id column="id" property="id" />
			<result column="username" property="username" />
		</association>

		<association property="auditor"
			javaType="com.yueqian.base.domain.Logininfo" columnPrefix="au_">
			<id column="id" property="id" />
			<result column="username" property="username" />
		</association>

		<association property="bankInfo"
			javaType="com.yueqian.business.domain.PlatformBankInfo"
			columnPrefix="b_"
			resultMap="com.yueqian.business.mapper.PlatformBankInfoMapper.BaseResultMap" />
	</resultMap>

	<insert id="insert" useGeneratedKeys="true" keyProperty="id">
		insert
		into `rechargeoffline` (state, remark, auditTime,
		applyTime,
		auditor_id, applier_id,
		tradeCode, tradeTime, amount,
		note, bankinfo_id)
		values (#{state,jdbcType=TINYINT}, #{remark,jdbcType=VARCHAR},
		#{auditTime,jdbcType=TIMESTAMP},
		#{applyTime,jdbcType=TIMESTAMP},
		#{auditor.id,jdbcType=BIGINT}, #{applier.id,jdbcType=BIGINT},
		#{tradeCode,jdbcType=VARCHAR}, #{tradeTime,jdbcType=TIMESTAMP},
		#{amount,jdbcType=DECIMAL},
		#{note,jdbcType=VARCHAR},
		#{bankInfo.id,jdbcType=BIGINT})
	</insert>
	
	<update id="updateByPrimaryKey">
		update `rechargeoffline`
		set state =
		#{state,jdbcType=TINYINT},
		remark = #{remark,jdbcType=VARCHAR},
		auditTime = #{auditTime,jdbcType=TIMESTAMP},
		applyTime =
		#{applyTime,jdbcType=TIMESTAMP},
		auditor_id =
		#{auditor.id,jdbcType=BIGINT},
		applier_id =
		#{applier.id,jdbcType=BIGINT},
		tradeCode =
		#{tradeCode,jdbcType=VARCHAR},
		tradeTime =
		#{tradeTime,jdbcType=TIMESTAMP},
		amount = #{amount,jdbcType=DECIMAL},
		note = #{note,jdbcType=VARCHAR},
		bankinfo_id =
		#{bankInfo.id,jdbcType=BIGINT}
		where id = #{id,jdbcType=BIGINT}
	</update>
	
	<sql id="base_column">
		r.id, r.state,
		r.remark, r.auditTime, r.applyTime,
		r.tradeCode, r.tradeTime, r.amount, r.note,
		ap.id as ap_id, ap.username as ap_username,
		au.id as au_id, au.username as au_username,
		b.id as b_id, b.bankName as b_bankName,
		b.accountName as b_accountName, b.bankForkName as b_bankForkName
	</sql>
	
	<sql id="base_table">
		`rechargeoffline` r join logininfo ap on ap.id = r.applier_id
		left join logininfo au on au.id = r.auditor_id
		join platformbankinfo b on b.id = r.bankinfo_id
	</sql>
	
	<sql id="base_where">
		<where>
			<if test="applierId!=null">
				AND r.applier_id = #{applierId}
			</if>
			<if test="state>-1">
				AND r.state = #{state}
			</if>
			<if test="beginTime!=null">
				AND r.applyTime &gt;= #{beginTime}
			</if>
			<if test="endTime!=null">
				AND r.applyTime &lt;= #{endTime}
			</if>
		</where>
	</sql>
	
	<select id="selectByPrimaryKey" resultMap="BaseResultMap">
		select <include refid="base_column"/>
		from <include refid="base_table"/>
		where r.id = #{id,jdbcType=BIGINT}
	</select>

	<select id="queryByCount" resultType="int">
		select count(r.id) 
		from <include refid="base_table"/> 
		<include refid="base_where"/>
	</select>
	
	<select id="query" resultMap="BaseResultMap">
		select <include refid="base_column"/>
		from <include refid="base_table"/>
		<include refid="base_where"/>
		limit #{start},#{pageSize}
	</select>
	
	
	
</mapper>